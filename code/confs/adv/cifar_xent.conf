train{
    seed=50
    expname=cifar_xnet
    dataset = torchvision.datasets.CIFAR10
    transforms = [torchvision.transforms.RandomCrop,torchvision.transforms.RandomHorizontalFlip,torchvision.transforms.ToTensor]
    trans_props{
        torchvision.transforms.RandomCrop
        {
            size = 32
            padding = 4
        }
    }
    datapath =  datasets
    scheduler = our
    optimizer = torch.optim.Adam
    optimizer_props{
    lr=3.0e-4
    weight_decay=1e-6
    }
    #optimizer = torch.optim.SGD
    #optimizer_props{
       # lr=0.001
        #momentum=0.9
         #weight_decay=2e-4
    #}

    adv_plot_loss{
        enabled=False
        loss_fn = model.adversarial.loss.Xnet
        loss_fn_props{reduction=none}

    }
}

plot{
    resolution = 50
    mc_value = 0.0
    is_uniform_grid = True
    verbose = False
    save_html = True
}

adversarial{
    attacks{
        pgd_whitebox_xent_03{
            attack = advertorch.attacks.LinfPGDAttack
            is_whitebox = True
            props{
                loss_fn = model.common.loss.Xent
                loss_fn_prop{
                    reduction = sum,in_adv=True
                }
                eps = 0.031 #8/255
                eps_iter = 0.003 # 2/255
                nb_iter = 20
                rand_init = True
                targeted=False
                clip_min = 0.0
                clip_max = 1.0
                }
        }

        pgd_whitebox_margin03{
            attack = advertorch.attacks.LinfPGDAttack
            is_whitebox = True
            props{
                loss_fn = model.common.loss.MarginLoss
                loss_fn_prop{reduction=sum,correct_negative=True,in_adv=True}
                eps =  0.031 #8/255
                eps_iter = 0.003 # 2/255
                nb_iter = 20
                rand_init = True
                targeted=False
                clip_min = 0.0
                clip_max = 1.0
                }
        }

        pgd_blackbox_xent_03{
            attack = advertorch.attacks.LinfPGDAttack
            is_whitebox = False
            props{
                loss_fn = model.common.loss.Xent
                loss_fn_prop{
                    reduction = sum,in_adv=True
                }
                eps =  0.031 #8/255
                eps_iter = 0.003 # 2/255
                nb_iter = 20
                rand_init = True
                targeted=False
                clip_min = 0.0
                clip_max = 1.0
                }
        }

        pgd_blackbox_margin03{
            attack = advertorch.attacks.LinfPGDAttack
            is_whitebox = False
            props{
                loss_fn = model.common.loss.MarginLoss
                loss_fn_prop{reduction=sum,correct_negative=True,in_adv=True}
                eps =  0.031 #8/255
                eps_iter = 0.003 # 2/255
                nb_iter = 20
                rand_init = True
                targeted=False
                clip_min = 0.0
                clip_max = 1.0
                }
        }
    }
    blackbox{
        enabled=False
        type = model.adversarial.archs.WrapNetwork
        networks{
            xent{
                model = model.adversarial.archs.ConvNet4
                expname = cifar/xent/cifarlarge
                epoch=200
            }

            madry{
                model = model.adversarial.archs.ConvNet4
                expname = cifar/madry/cifarlarge_eps0.045
                epoch=200
            }

            trades{
                model = model.adversarial.archs.ConvNet4
                expname = cifar/trades/cifarlarge_eps0.031
                epoch=200
            }

            ours{
                model = model.adversarial.archs.ConvNet4
                expname = cifar/ours/cifarlarge
                epoch=200
            }
        }
    }
}
network{

    type = model.adversarial.archs.WrapNetwork
    model = model.adversarial.archs.ConvNet4

    loss{
        loss_type = model.common.loss.Xent
        properties = {reduction=mean,in_adv=False}
    }
    adversarial_training{
        augment = False
    }
}
