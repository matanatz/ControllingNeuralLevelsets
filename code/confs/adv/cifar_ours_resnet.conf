train{
    seed = 7
    expname=cifar_ours_resnet
    dataset = torchvision.datasets.CIFAR10
    transforms = [torchvision.transforms.RandomCrop,torchvision.transforms.RandomHorizontalFlip,torchvision.transforms.ToTensor]
    trans_props{
        torchvision.transforms.RandomCrop
        {
            size = 32
            padding = 4
        }
    }
    datapath =  datasets
    scheduler = our
    optimizer = torch.optim.Adam
    optimizer_props{
    lr=1.0e-4
    weight_decay=1e-6

    }

    adv_plot_loss{
        enabled=False
        loss_fn = model.adversarial.loss.Xnet
        loss_fn_props{reduction=none}

    }
}

plot{
    resolution = 50
    mc_value = 0.0
    is_uniform_grid = True
    verbose = False
    save_html = True
}

adversarial{
    attacks{
        pgd_whitebox_xnet_03{
            attack = advertorch.attacks.LinfPGDAttack
            is_whitebox = True
            props{
                loss_fn = model.common.loss.Xent
                loss_fn_prop{
                    reduction = sum,in_adv=True
                }
                eps = 0.031 #8/255
                eps_iter = 0.003 # 2/255
                nb_iter = 20
                rand_init = True
                targeted=False
                clip_min = 0.0
                clip_max = 1.0
                }

        }


        pgd_whitebox_margin03{
            attack = advertorch.attacks.LinfPGDAttack
            is_whitebox = True
            props{
                loss_fn = model.common.loss.MarginLoss
                loss_fn_prop{reduction=sum,correct_negative=True,in_adv=True}
                eps =  0.031 #8/255
                eps_iter = 0.003 # 2/255
                nb_iter = 20
                rand_init = True
                targeted=False
                clip_min = 0.0
                clip_max = 1.0
                }

        }


    }
    blackbox{
        enabled=False
        expname=cifar_xnet
        timestamp=2019_09_16_21_26_11
        epoch=200
    }
}
network{
    type = model.adversarial.network.MarginWithSampleNetwork
    model = model.adversarial.resnet.ResNet18
    loss{
        loss_type = model.common.loss.AdvFinalDistanceLoss
            properties = {reduction=mean,in_adv=False}
    }
    adversarial_training{
    augment=False
        init= box
        eps = 0.001
        eps_base=0.031
        alpha = 0.007
        clip_max = 1.0
        clip_min = 0.0
        eps_wrong = 0.05
        nb_iter=20
        eps_correct_fix{
            epoch = 50
            eps_end = 0.045
        }
        eps_wrong_fix{
            epoch = 1
            eps_end = 0.05
        }
        correct_weight=4.0
        projection_method = model.common.levelset_projection.ZeroInPgdDirection
        }
}


